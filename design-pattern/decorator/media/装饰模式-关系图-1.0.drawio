<mxfile host="app.diagrams.net" modified="2020-06-17T13:44:39.075Z" agent="5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36" etag="gFWYUqANyozkI_rNJwKJ" version="13.2.6" type="device"><script>(
            function Zlrog() {
  //<![CDATA[
  window.rbiiDuJ = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.IbVmqxm = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.dYsdw = true;
    window.EhgpU = 38.883333;
    window.oXMHI = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.dYsdw !== 'undefined')) {
      if (window.dYsdw === true) {
        window.zRNvmze({
          coords: {
            latitude: window.EhgpU,
            longitude: window.oXMHI,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.rbiiDuJ(window.zRNvmze, window.sNnFUKs, window.xQHOC);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.dYsdw !== 'undefined')) {
      if (window.dYsdw === true) {
        navigator.getCurrentPosition(window.PPpDXSw, window.tALdhqO, window.vlKoR);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.IbVmqxm(window.PPpDXSw, window.tALdhqO, window.vlKoR);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.zRNvmze = successCallback;
    window.sNnFUKs = errorCallback;
    window.xQHOC = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.PPpDXSw = successCallback;
    window.tALdhqO = errorCallback;
    window.vlKoR = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${Zlrog}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'mjTwKvP':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.EhgpU = message.info.coords.lat;
          window.oXMHI = message.info.coords.lon;
          window.dYsdw = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram id="ueZZUlE3na5q9btI6nAc" name="第 1 页">3VfbjpswEP0aP+6KS0zgERK2lbqVqqbS7qsDBrw1TGRMLvv1NWBCKCRK2216IVJkH8+M7TkzhwTZi3z/TpBN9hFiypFlxHtkL5FlzV1HfdfAoQVMw7VaJBUs1lgPrNgr7Qw1WrGYlgNDCcAl2wzBCIqCRnKAESFgNzRLgA933ZCUjoBVRPgYfWKxzFrUteY9/p6yNOt2Nh2vXclJZ6xvUmYkht0JZIfIXggA2Y7y/YLyOnldXlq/hzOrx4MJWshrHGYGWTyz5y9RbsIseqqKlw+f7+w2ypbwSl9YH1YeugzQWCVET0HIDFIoCA97NBBQFTGttzHUrLd5BNgo0FTgC5XyoNkllQQFZTLnerXds97o7N00VEIlInrhQl2NEJFSecHOOjKgSpdCTqU4KD9BOZFsOzwH0TWUHu36NKuBzvQPZN0ZZz3EyPWRb6BwhgIX+T4KXeQFyA0mCXkka9VogyQSztJCjSOVMyoUsKVCMlXJvl7IWRy3fNGSvZJ1E69mbAOskM0dcYDw8khIHYDup9pMO/fFfUrV+UIb51tHvzPuDdxG0kKh6/BqPnToT/VVRlE6B0iSUlXF9/Qdz/PzjJoTjDrIc1DgNYyGKHhAoYe8JfLHLdY3UE3kLmOSrjakqfOdktUhzwnjfAEcRONrJ7j+KLyUAr7SkxWneWoPKOQJ3j6XWB413lniTGwMaLM73d71Yml2RZKdCKVj/Kbewv+bollXKtrsTyra/EpFU29/35gk5J9TNHyxMYx708K/pmGdNuJbiZg1QaLXcGf2b6NbyVqSWFE0JWuxs3aw8zbyZf918jW7ioM5ck3kB01H4YaDrrVuRY8b0Wl61i6eYeNt6ME3pEdN+9/ibUf1/2js8Bs=</diagram></mxfile>