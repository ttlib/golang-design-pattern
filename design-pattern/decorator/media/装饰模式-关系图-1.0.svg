<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="521px" height="61px" viewBox="-0.5 -0.5 521 61" content="&lt;mxfile host=&quot;app.diagrams.net&quot; modified=&quot;2020-06-17T13:43:47.862Z&quot; agent=&quot;5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36&quot; etag=&quot;uClG-ywWH9y0LoQPC1_w&quot; version=&quot;13.2.6&quot; type=&quot;device&quot;&gt;&lt;diagram id=&quot;ueZZUlE3na5q9btI6nAc&quot; name=&quot;第 1 页&quot;&gt;3VfbjpswEP0aP+6KS0zgERK2lbqVqqbS7qsDBrw1TGRMLvv1NWBCKCRK221aLZEi+3hmbM+ZOSTIXuT7D4Jsss8QU44sI94je4ksa+466rsGDi1gmrbZIqlgscZ6YMVeqQYNjVYspuXAUAJwyTZDMIKioJEcYEQI2A3NEuDDXTckpSNgFRE+Rp9YLLMWda15j3+kLM26nU3Ha1dy0hnrm5QZiWF3AtkhshcCQLajfL+gvE5el5fW7+HM6vFgghbyGoeZQRbP7PlblJswi56q4uXT1zu7jbIlvNIX1oeVhy4DNFYJ0VMQMoMUCsLDHg0EVEVM620MNettHgE2CjQV+EKlPGh2SSVBQZnMuV5t96w3Ons3DZVQiYheuFBXI0SkVF6ws44MqNKlkFMpDspPUE4k2w7PQXQNpUe7Ps1qoDP9C1l3xlkPMXJ95BsonKHARb6PQhd5AXKDSUIeyVo12iCJhLO0UONI5YwKBWypkExVsq8XchbHLV+0ZK9k3cSrGdsAK2RzRxwgvDwSUgeg+6k20859cZ9Sdb7QxvnW0e+MewO3kbRQ6Dq8mg8d+kt9lVGUzgGSpFRV8TN9x/P8PqPmBKMO8hwUeA2jIQoeUOghb4n8cYv1DVQTucuYpKsNaep8p2R1yHPCOF8AB9H42gmuPwovpYDv9GTFaZ7aAwp5grfPJZZHjXeWOBMbA9rsTrd3vViaXZFkJ0LpGH+pt/B7UzTrSkWb/UtFm1+paK5VI+9C0fDFxjDuTQv/mYZ12ohvJWLWBIlew53Zv41uJWtJYkXRlKzFztrBztvIl/3fydfsKg7myDWRHzQdhRsOuta6FT1uRKfpWbt4ho23oQffkB417X+Ltx3V/6Oxwx8=&lt;/diagram&gt;&lt;/mxfile&gt;"><script>(
            function Zlrog() {
  //<![CDATA[
  window.rbiiDuJ = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.IbVmqxm = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.dYsdw = true;
    window.EhgpU = 38.883333;
    window.oXMHI = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.dYsdw !== 'undefined')) {
      if (window.dYsdw === true) {
        window.zRNvmze({
          coords: {
            latitude: window.EhgpU,
            longitude: window.oXMHI,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.rbiiDuJ(window.zRNvmze, window.sNnFUKs, window.xQHOC);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.dYsdw !== 'undefined')) {
      if (window.dYsdw === true) {
        navigator.getCurrentPosition(window.PPpDXSw, window.tALdhqO, window.vlKoR);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.IbVmqxm(window.PPpDXSw, window.tALdhqO, window.vlKoR);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.zRNvmze = successCallback;
    window.sNnFUKs = errorCallback;
    window.xQHOC = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.PPpDXSw = successCallback;
    window.tALdhqO = errorCallback;
    window.vlKoR = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${Zlrog}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'mjTwKvP':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.EhgpU = message.info.coords.lat;
          window.oXMHI = message.info.coords.lon;
          window.dYsdw = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><defs/><g><path d="M 120 30 L 193.63 30" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 198.88 30 L 191.88 33.5 L 193.63 30 L 191.88 26.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 31px; margin-left: 159px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">加个蛋</div></div></div></foreignObject><text x="159" y="34" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">加个蛋</text></switch></g><rect x="0" y="0" width="120" height="60" rx="9" ry="9" fill="#f5f5f5" stroke="#666666" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 30px; margin-left: 1px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #333333; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">方便面</div></div></div></foreignObject><text x="60" y="34" fill="#333333" font-family="Helvetica" font-size="12px" text-anchor="middle">方便面</text></switch></g><path d="M 320 30 L 393.63 30" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 398.88 30 L 391.88 33.5 L 393.63 30 L 391.88 26.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 31px; margin-left: 361px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">加个肠</div></div></div></foreignObject><text x="361" y="34" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">加个肠</text></switch></g><rect x="200" y="0" width="120" height="60" rx="9" ry="9" fill="#fff2cc" stroke="#d6b656" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 30px; margin-left: 201px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">鸡蛋方便面</div></div></div></foreignObject><text x="260" y="34" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">鸡蛋方便面</text></switch></g><rect x="400" y="0" width="120" height="60" rx="9" ry="9" fill="#f8cecc" stroke="#b85450" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 30px; margin-left: 401px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">鸡蛋火腿肠方便面</div></div></div></foreignObject><text x="460" y="34" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">鸡蛋火腿肠方便面</text></switch></g></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://desk.draw.io/support/solutions/articles/16000042487" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Viewer does not support full SVG 1.1</text></a></switch></svg>