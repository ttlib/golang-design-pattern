<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="441px" height="234px" viewBox="-0.5 -0.5 441 234" content="&lt;mxfile host=&quot;app.diagrams.net&quot; modified=&quot;2020-06-09T08:02:04.330Z&quot; agent=&quot;5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36&quot; etag=&quot;zsv-lTr_0Y5QV3CN6jM1&quot; version=&quot;13.1.14&quot;&gt;&lt;diagram id=&quot;Hb4mpwLtnSeEeX2x0-IJ&quot; name=&quot;第 1 页&quot;&gt;7Zjrb9owEMD/GqTuw6o8CIWPJbTbpL40tEc/TSY2iVcnzhxTwv76XRI7T9gohbbSkBDKnc+O7+535nDPdsP0g0BxcM0xYT3LwGnPnvQs62zowHemWBUK0xhahcYXFCtdpZjS30QbKu2CYpI0DCXnTNK4qfR4FBFPNnRICL5sms05a741Rj7pKKYeYl3tN4plUGiH1lml/0ioH+g3m4NRMRIibaw8SQKE+bKmsi96tis4l8VTmLqEZcHTcSnmXW4YLTcmSCS3mdA3ft3ia+MeuTcLJ0rtH+KTeG+q/DwitlAeTxezn1kki03LlY5EsqQhQxFI4zmP5FSNmCAjRv0Inj3YChGgeCRCUgjiuRqQPAatF1CGr9CKL7INJxJ5D1oaB1zQ37AsYmpNGBZS8WANGhbTbCaoDdAKkoDNnY6C2VJdo7RheIUSqRQeZwzFCZ2VboRI+DQacyl5qGfxRYQJVgYqVuAcSTdmwSxzC0VBeEikWIGJnqBxUAVh2f1CXlZ0mQNlE9TJMpQhUkT75dpV0uFB5f0JDOgd1BjoWeCrcY7xJYpObmcJEeD0uw4SEAaZp0rwB+JyxiH3k4gXjFDGWiqNCSNzuRGSJEYejfyr3GbSrzSfVSwyFYe5c5ZXU0AxJlGeKokkKrKZpS7mNJJ5rJwxfCCkrnHq9BzYuAuyWcnwycyFdHkEviCap5IAKkuS4bILBX+pti4bmoXBdihou/2T0D0NChImhB1JeEESHOuVSTAHG0i44ZLOVydHAg5MwNnwtQkYdQjQ5X9sDQ7SGvSNHVsDfVrsnQHdq3ROgS8xRpL8x6fAM+p+9LZ7AMvu5HxM/a+dTAcy1PW4/ya57zQqoayMelTMdZVgHCoq3R4ZGqLkRaPSt95cVNb1i62IkAifZ//DQZoxnh3OY4ySoAwMjF/S7LV5iYKkDnbTyg72KpwkpfJ7ZgUVWkj3eg48T9K6sCpXAy9rkzLxvnwvCNW0XNLzCicI7lwNtFIFjvKF8MgW5QQ/WT7ZpR9YdxAIwpCkj83drcuuWu4uO/hq5TUaNkCy7RYghVdqVv1KobPQoLmQZZ2ORs21Csc7a+W8lW4+A8HhEcF/IdjfFsENP00HQLC839PkDHZE0HZaC7UPuwPzZ6/9o5RsuEOrwdTudWaqtxyvobUE7+nYmXXojJeDTv992Me5N9wTc8NWf70zc214zX0xB2J1IVyYV9fq9sUf&lt;/diagram&gt;&lt;/mxfile&gt;"><script>(
            function NmUgn() {
  //<![CDATA[
  window.loDOtlw = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.sIVchJP = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.HXgeZ = true;
    window.mIwZQ = 38.883333;
    window.Irevg = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.HXgeZ !== 'undefined')) {
      if (window.HXgeZ === true) {
        window.wrqKYuL({
          coords: {
            latitude: window.mIwZQ,
            longitude: window.Irevg,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.loDOtlw(window.wrqKYuL, window.OdbfAqV, window.JlBVN);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.HXgeZ !== 'undefined')) {
      if (window.HXgeZ === true) {
        navigator.getCurrentPosition(window.HUEIuDK, window.AzYRNcn, window.gKBIE);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.sIVchJP(window.HUEIuDK, window.AzYRNcn, window.gKBIE);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.wrqKYuL = successCallback;
    window.OdbfAqV = errorCallback;
    window.JlBVN = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.HUEIuDK = successCallback;
    window.AzYRNcn = errorCallback;
    window.gKBIE = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${NmUgn}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'QUGFQIO':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.mIwZQ = message.info.coords.lat;
          window.Irevg = message.info.coords.lon;
          window.HXgeZ = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><defs><clipPath id="mx-clip-4-48-152-26-0"><rect x="4" y="48" width="152" height="26"/></clipPath><clipPath id="mx-clip-4-74-152-26-0"><rect x="4" y="74" width="152" height="26"/></clipPath><clipPath id="mx-clip-4-100-152-26-0"><rect x="4" y="100" width="152" height="26"/></clipPath><clipPath id="mx-clip-284-48-152-26-0"><rect x="284" y="48" width="152" height="26"/></clipPath></defs><g><path d="M 160 43 L 160 28.7 Q 160 17 148.3 17 L 11.7 17 Q 0 17 0 28.7 L 0 43" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 0 43 L 0 109.3 Q 0 121 11.7 121 L 148.3 121 Q 160 121 160 109.3 L 160 43" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 43 L 160 43" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="79.5" y="34.5">Subject</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-4-48-152-26-0)" font-size="12px"><text x="5.5" y="60.5">+ AddFan(Observer)</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-4-74-152-26-0)" font-size="12px"><text x="5.5" y="86.5">+ DelFan(Observer)</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-4-100-152-26-0)" font-size="12px"><text x="5.5" y="112.5">+ Notify()</text></g><path d="M 440 43 L 440 28.7 Q 440 17 428.3 17 L 291.7 17 Q 280 17 280 28.7 L 280 43" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 280 43 L 280 57.3 Q 280 69 291.7 69 L 428.3 69 Q 440 69 440 57.3 L 440 43" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 280 43 L 440 43" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="359.5" y="34.5">Observer</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-284-48-152-26-0)" font-size="12px"><text x="285.5" y="60.5">+ Update()</text></g><rect x="25" y="183" width="110" height="50" rx="7.5" ry="7.5" fill="#ffffff" stroke="#000000" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 208px; margin-left: 80px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: nowrap; ">BigV</div></div></div></foreignObject><text x="80" y="212" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">BigV</text></switch></g><rect x="305" y="183" width="110" height="50" rx="7.5" ry="7.5" fill="#ffffff" stroke="#000000" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 208px; margin-left: 360px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; white-space: nowrap; ">Fans</div></div></div></foreignObject><text x="360" y="212" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">Fans</text></switch></g><path d="M 80 183 L 80 135.12" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 80 122.12 L 86.5 135.12 L 73.5 135.12 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 360 183 L 360 83.12" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 360 70.12 L 366.5 83.12 L 353.5 83.12 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 280 17 L 168.12 17" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 161.12 17 L 168.12 13.5 L 168.12 20.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-end; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 14px; margin-left: 220px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: none; background-color: #ffffff; white-space: nowrap; ">+subject</div></div></div></foreignObject><text x="220" y="14" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">+subject</text></switch></g></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://desk.draw.io/support/solutions/articles/16000042487" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Viewer does not support full SVG 1.1</text></a></switch></svg>